#!/bin/sh

# Pre-commit hook that checks
# gofmt, golint, go vet
# Once enabled, you can skip by doing a git-commit with the --no-verify flag

TERM_BLACK="\e[30m"
TERM_RED="\e[31m"
TERM_GREEN="\e[32m"
TERM_BACKGROUND_RED="\e[41m"
TERM_BACKGROUND_GREEN="\e[42m"
TERM_END_COLOR="\e[0m"

STAGED_GO_FILES=$(git diff --cached --name-only | grep ".go$")

if [[ "$STAGED_GO_FILES" = "" ]]; then
  exit 0
fi

# Check for golint
GOLINT=$GOPATH/bin/golint
if [[ ! -x "$GOLINT" ]]; then
  printf "\t${TERM_BACKGROUND_RED}Please install golint${TERM_END_COLOR} (go get -u golang.org/x/lint/golint)"
  exit 1
fi

PASS=true
for FILE in $STAGED_GO_FILES
do
  # Capture and check STDOUT for gofmt as it does not return non-zero.
  OUTPUT=$(gofmt -d -e $FILE >&1)
  if [[ $OUTPUT != "" ]]; then
    echo "$OUTPUT"
    printf "\tgofmt $FILE ${TERM_BLACK}${TERM_BACKGROUND_RED}FAILED${TERM_END_COLOR}\n"
    PASS=false
  else
    printf "\tgofmt $FILE ${TERM_GREEN}pass${TERM_END_COLOR}\n"
  fi

  # Run golint on the staged file and check the exit status
  $GOLINT "-set_exit_status" $FILE
  if [[ $? == 1 ]]; then
    printf "\tgolint $FILE ${TERM_BLACK}${TERM_BACKGROUND_RED}FAILED${TERM_END_COLOR}\n"
    PASS=false
  else
    printf "\tgolint $FILE ${TERM_GREEN}pass${TERM_END_COLOR}\n"
  fi

  # Go VET is commented out because it can't be run on one file at a time.
  # Run govet on the staged file and check the exit status
  #go vet $FILE
  #if [[ $? != 0 ]]; then
  #  printf "\t$go vet $FILE ${TERM_BLACK}${TERM_BACKGROUND_RED}FAILED${TERM_END_COLOR}\n"
  #  PASS=false
  #else
  #  printf "\tgo vet $FILE ${TERM_GREEN}pass${TERM_END_COLOR}\n"
  #fi
done

if ! $PASS; then
  printf "Pre-Commit Check:${TERM_BLACK}${TERM_BACKGROUND_RED}FAILED${TERM_END_COLOR}\n"
  exit 1
else
  printf "Pre-Commit Check:${TERM_BLACK}${TERM_BACKGROUND_GREEN}PASSED${TERM_END_COLOR}\n"
fi

exit 0
